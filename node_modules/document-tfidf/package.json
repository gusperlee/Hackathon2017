{
  "name": "document-tfidf",
  "version": "0.2.1",
  "description": "A TFIDF analysis package that allows for tokens of any word length",
  "main": "tfidf.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/syeoryn/textAnalysisSuite"
  },
  "keywords": [
    "tfidf",
    "tf-idf",
    "TFIDF",
    "TF-IDF",
    "term frequency inverse document frequency",
    "text analysis",
    "language processing"
  ],
  "author": {
    "name": "Drew Cuthbertson"
  },
  "license": "ISC",
  "dependencies": {
    "word-ngrams": "^0.1.2"
  },
  "readme": "####Getting Started\nInstall package with:\n```\n  npm install document-tfidf\n```\n\n####Features:\n  * countTermFrequencies\n  * storeTermFrequencies\n  * normalizeTermFrequencies\n  * identifyUniqueTerms\n  * fullTFIDFAnalysis\n\n\n#### Documentation\n  * Term Frequency - Inverse Document Frequency (TFIDF) Module:\n    * countTermFrequencies: function(text [, options])\n      * Counts the number of times each token appears in the input text.\n      * Current options include tokenLength, which dictates the number of words that comprise each token.  tokenLength defaults to 1.\n      * Depends on nGrams module, which can get all tokens with arbitrary length.\n    * storeTermFrequencies: function(tokenSet, TFStorage)\n      * Adds the tokenSet to the collectionStorage for improved analysis over time.\n      * Itâ€™s recommended to save this collection in a persistent data store, although this is unnecessary.\n      * If collectionStorage is not provided, it will create it as an object and return that object.\n    * normalizeTermFrequencies: function(tokenSet, TFStorage)\n      * For each token in tokenSet, normalizeTermFrequencies will divide its count by the total number found in TFStorage and return the token set with normalized counts.\n    * identifyUniqueTerms: function(normalizedTokenSet [, options])\n      * From the input normalizedTokenSet, identifyUniqueTerms will return the most unique tokens, as defined by the highest TFIDF\n      * Current options include uniqueThreshold.  If specified, identifyUniqueTerms will return all terms with a TFIDF equal to or greater than the uniqueThreshold\n    * fullTFIDAnalysis: function(text [, options])\n      * Completes all of the above TFIDF calculations\n      * options correspond with the options for each piece of the analysis\n\n\nView the full specs and check out more text analysis in my [Text Analysis Suite](https://github.com/Syeoryn/textAnalysisSuite).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/syeoryn/textAnalysisSuite/issues"
  },
  "_id": "document-tfidf@0.2.1",
  "_from": "document-tfidf@~0.2.1"
}

(function() {
  var ERRORS, OPTIONS_HEADER_KEY, WordFrequencyAnalyzer, WordFrequencyAnalyzerHTTPApi, current_analyzers, debug, default_wfa, readStream, sendErrorToStreamAsJSON, sendSuccessToStreamAsJSON, _, _ref;

  debug = require('debug')('wfa:WordFrequencyAnalyzerHTTPApi');

  ERRORS = require('./constants/word_frequency_analyzer/http_api_errors');

  WordFrequencyAnalyzer = require('./word_frequency_analyzer');

  _ = require('underscore');

  _ref = require('./utils'), readStream = _ref.readStream, sendErrorToStreamAsJSON = _ref.sendErrorToStreamAsJSON, sendSuccessToStreamAsJSON = _ref.sendSuccessToStreamAsJSON;

  OPTIONS_HEADER_KEY = 'options';

  current_analyzers = {};

  default_wfa = new WordFrequencyAnalyzer();

  current_analyzers[default_wfa.getParserOptionsId()] = default_wfa;

  WordFrequencyAnalyzerHTTPApi = {
    '/analyzeDocument': function(request, response, args) {
      if (request.method === 'POST') {
        return readStream(request, false, function(error, documentString) {
          var options, parserOptionsId, stats, wfa;
          if (error != null) {
            return sendErrorToStreamAsJSON(response, ERRORS.INCOMING_STREAM_PARSE_ERROR(error.message));
          }
          options = request.headers[OPTIONS_HEADER_KEY];
          try {
            if ((options != null) && typeof options === "string") {
              options = JSON.parse(options);
            }
          } catch (_error) {
            error = _error;
            return sendErrorToStreamAsJSON(response, ERRORS.PARSER_HEADER_OPTIONS_PARSE_ERROR(error.message));
          }
          parserOptionsId = WordFrequencyAnalyzer.getParserOptionsId(options);
          wfa = current_analyzers[parserOptionsId];
          if (wfa == null) {
            wfa = new WordFrequencyAnalyzer(options);
            current_analyzers[parserOptionsId] = wfa;
          }
          try {
            stats = wfa.analyzeDocument(documentString, args != null ? args.desiredWordListByFrequencyLength : void 0);
          } catch (_error) {
            error = _error;
            return sendErrorToStreamAsJSON(response, ERRORS.ANALYZE_DOCUMENT_ERROR(error.message));
          }
          return sendSuccessToStreamAsJSON(response, stats != null ? stats.sortedWordsByFrequency : void 0);
        });
      } else {
        return sendErrorToStreamAsJSON(response, ERRORS.HTTP_METHOD_ERROR("HTTP method should be 'POST'"));
      }
    }
  };

  module.exports = WordFrequencyAnalyzerHTTPApi;

}).call(this);

(function() {
  var ERRORS, PARSER_OPTIONS_DEFAULTS, PARSER_OPTIONS_KEYS, ReversibleAVLTree, STOP_CHAR_HASH, STOP_WORD_FILTER_HASH, WORD_STEM_AND_MODIFIER_REGEXP, WordFrequencyAnalyzer, debug, _, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('wfa:WordFrequencyAnalyzer');

  ERRORS = require('./constants/word_frequency_analyzer/errors');

  ReversibleAVLTree = require('./binary_tree_additions').ReversibleAVLTree;

  _ = require('underscore');

  _ref = require('./constants/word_frequency_analyzer/parser_options'), PARSER_OPTIONS_KEYS = _ref.PARSER_OPTIONS_KEYS, PARSER_OPTIONS_DEFAULTS = _ref.PARSER_OPTIONS_DEFAULTS;

  _ref1 = require('./constants/word_frequency_analyzer/parser_definitions'), STOP_CHAR_HASH = _ref1.STOP_CHAR_HASH, STOP_WORD_FILTER_HASH = _ref1.STOP_WORD_FILTER_HASH, WORD_STEM_AND_MODIFIER_REGEXP = _ref1.WORD_STEM_AND_MODIFIER_REGEXP;

  WordFrequencyAnalyzer = (function() {
    function WordFrequencyAnalyzer(options) {
      var _ref2, _ref3, _ref4, _ref5;
      if (options == null) {
        options = {};
      }
      this.filterStopWord = __bind(this.filterStopWord, this);
      this.extractModifiersFromWord = __bind(this.extractModifiersFromWord, this);
      this.removeCaseFromWord = __bind(this.removeCaseFromWord, this);
      this.extractWord = __bind(this.extractWord, this);
      this.analyzeDocument = __bind(this.analyzeDocument, this);
      this.getParserOptionsId = __bind(this.getParserOptionsId, this);
      this.language = (_ref2 = options[PARSER_OPTIONS_KEYS.LANGUAGE]) != null ? _ref2 : PARSER_OPTIONS_DEFAULTS[PARSER_OPTIONS_KEYS.LANGUAGE];
      this.caseSensitivityEnabled = (_ref3 = options[PARSER_OPTIONS_KEYS.CASE_SENSITIVITY]) != null ? _ref3 : PARSER_OPTIONS_DEFAULTS[PARSER_OPTIONS_KEYS.CASE_SENSITIVITY];
      this.filterStopWordsEnabled = (_ref4 = options[PARSER_OPTIONS_KEYS.FILTER_STOP_WORDS]) != null ? _ref4 : PARSER_OPTIONS_DEFAULTS[PARSER_OPTIONS_KEYS.FILTER_STOP_WORDS];
      this.extractFullRootWordEnabled = (_ref5 = options[PARSER_OPTIONS_KEYS.EXTRACT_FULL_ROOT_WORD]) != null ? _ref5 : PARSER_OPTIONS_DEFAULTS[PARSER_OPTIONS_KEYS.EXTRACT_FULL_ROOT_WORD];
      this.LOCALIZED_STOP_CHAR_HASH = STOP_CHAR_HASH(this.language);
      this.LOCALIZED_STOP_WORD_HASH = STOP_WORD_FILTER_HASH(this.language);
      this.LOCALIZED_WORD_STEM_AND_MODIFIER_REGEXP = WORD_STEM_AND_MODIFIER_REGEXP(this.language);
    }

    WordFrequencyAnalyzer.prototype.getParserOptionsId = function() {
      var options;
      options = {};
      options[PARSER_OPTIONS_KEYS.LANGUAGE] = this.language;
      options[PARSER_OPTIONS_KEYS.CASE_SENSITIVITY] = this.caseSensitivityEnabled;
      options[PARSER_OPTIONS_KEYS.FILTER_STOP_WORDS] = this.filterStopWordsEnabled;
      options[PARSER_OPTIONS_KEYS.EXTRACT_FULL_ROOT_WORD] = this.extractFullRootWordEnabled;
      return WordFrequencyAnalyzer.getParserOptionsId(options);
    };

    WordFrequencyAnalyzer.prototype.analyzeDocument = function(documentString, desiredWordListByFrequencyLength) {
      var documentCharCount, highestFrequency, nonStopCharFound, numberWordsToReturn, startPos, wordFrequencyHash, wordFrequencyTree,
        _this = this;
      if (documentString == null) {
        throw new Error(ERRORS.MISSING_DOCUMENT_PARAM());
      }
      documentCharCount = documentString.length;
      numberWordsToReturn = desiredWordListByFrequencyLength != null ? desiredWordListByFrequencyLength : documentCharCount;
      wordFrequencyTree = new ReversibleAVLTree();
      wordFrequencyHash = {};
      startPos = 0;
      highestFrequency = 0;
      nonStopCharFound = false;
      _.each(documentString, function(currentChar, currentIndex) {
        var newWord, newWordFrequency;
        if (_this.LOCALIZED_STOP_CHAR_HASH[currentChar] != null) {
          if (nonStopCharFound) {
            newWord = _this.extractWord(documentString, startPos, currentIndex);
          }
          startPos = currentIndex + 1;
          nonStopCharFound = false;
        } else if (currentIndex + 1 === documentCharCount) {
          newWord = _this.extractWord(documentString, startPos, documentCharCount);
        } else {
          nonStopCharFound = true;
        }
        if (newWord != null) {
          newWordFrequency = WordFrequencyAnalyzer.incrementWordFrequency(wordFrequencyHash, wordFrequencyTree, newWord);
          if (highestFrequency < newWordFrequency) {
            highestFrequency = newWordFrequency;
          }
          return newWord = void 0;
        }
      });
      return {
        sortedWordsByFrequency: wordFrequencyTree.betweenBoundsReversedTillCount({
          $lte: highestFrequency,
          $gte: 1
        }, numberWordsToReturn),
        wordFrequencyTree: wordFrequencyTree,
        wordFrequencyHash: wordFrequencyHash
      };
    };

    WordFrequencyAnalyzer.prototype.extractWord = function(documentString, startIndex, endIndex) {
      var word;
      word = documentString.substring(startIndex, endIndex);
      if (!this.caseSensitivityEnabled) {
        word = this.removeCaseFromWord(word);
      }
      if (this.extractFullRootWordEnabled) {
        word = this.extractModifiersFromWord(word);
      }
      if (this.filterStopWordsEnabled) {
        word = this.filterStopWord(word);
      }
      if ((word != null) && word.length > 0) {
        return word;
      } else {
        return void 0;
      }
    };

    WordFrequencyAnalyzer.prototype.removeCaseFromWord = function(word) {
      return word.toLowerCase();
    };

    WordFrequencyAnalyzer.prototype.extractModifiersFromWord = function(word) {
      _.each(this.LOCALIZED_WORD_STEM_AND_MODIFIER_REGEXP, function(regexp) {
        return word = word.replace(regexp, '');
      });
      return word;
    };

    WordFrequencyAnalyzer.prototype.filterStopWord = function(word) {
      if (this.LOCALIZED_STOP_WORD_HASH[word] != null) {
        return void 0;
      } else {
        return word;
      }
    };

    WordFrequencyAnalyzer.analyzeDocument = function(documentString, desiredWordListByFrequencyLength) {
      return this.analyzeDocumentWithOptions(documentString, desiredWordListByFrequencyLength);
    };

    WordFrequencyAnalyzer.analyzeDocumentWithOptions = function(documentString, desiredWordListByFrequencyLength, options) {
      var englishAnalyzerFilterStopWordsDisabled, sortedWordsByFrequency;
      englishAnalyzerFilterStopWordsDisabled = new this(options);
      sortedWordsByFrequency = englishAnalyzerFilterStopWordsDisabled.analyzeDocument(documentString, desiredWordListByFrequencyLength).sortedWordsByFrequency;
      return sortedWordsByFrequency;
    };

    WordFrequencyAnalyzer.incrementWordFrequency = function(wordFrequencyHash, wordFrequencyTree, word) {
      var wordFrequency, _ref2;
      wordFrequency = ((_ref2 = wordFrequencyHash[word]) != null ? _ref2 : 0) + 1;
      wordFrequencyHash[word] = wordFrequency;
      if (wordFrequency !== 1) {
        wordFrequencyTree["delete"](wordFrequency - 1, word);
      }
      wordFrequencyTree.insert(wordFrequency, word);
      return wordFrequency;
    };

    WordFrequencyAnalyzer.getParserOptionsId = function(options) {
      var caseSensitivity, extractFullRootWord, filterStopWords, language;
      if (options == null) {
        options = {};
      }
      language = options[PARSER_OPTIONS_KEYS.LANGUAGE] != null ? options[PARSER_OPTIONS_KEYS.LANGUAGE] : PARSER_OPTIONS_DEFAULTS[PARSER_OPTIONS_KEYS.LANGUAGE];
      caseSensitivity = options[PARSER_OPTIONS_KEYS.CASE_SENSITIVITY] ? '-caseSensitivityEnabled' : '';
      filterStopWords = options[PARSER_OPTIONS_KEYS.FILTER_STOP_WORDS] ? '-filterStopWordsEnabled' : '';
      extractFullRootWord = options[PARSER_OPTIONS_KEYS.EXTRACT_FULL_ROOT_WORD] ? '-extractFullRootWordEnabled' : '';
      return "" + language + caseSensitivity + filterStopWords + extractFullRootWord;
    };

    return WordFrequencyAnalyzer;

  })();

  module.exports = WordFrequencyAnalyzer;

}).call(this);

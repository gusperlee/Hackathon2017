(function() {
  var ERRORS, PORT, Url, WordFrequencyAnalyzerHTTPApi, cluster, cpuCount, debug, http, i, readStream, sendErrorToStreamAsJSON, sendSuccessToStreamAsJSON, server, _i, _ref;

  debug = require('debug')('wfa:server');

  cluster = require('cluster');

  ERRORS = require('./constants/word_frequency_analyzer/http_api_errors');

  http = require('http');

  cpuCount = require('os').cpus().length;

  Url = require('url');

  WordFrequencyAnalyzerHTTPApi = require('./word_frequency_analyzer_http_api');

  _ref = require('./utils'), readStream = _ref.readStream, sendErrorToStreamAsJSON = _ref.sendErrorToStreamAsJSON, sendSuccessToStreamAsJSON = _ref.sendSuccessToStreamAsJSON;

  if (cluster.isMaster && require.main === module) {
    for (i = _i = 0; 0 <= cpuCount ? _i < cpuCount : _i > cpuCount; i = 0 <= cpuCount ? ++_i : --_i) {
      cluster.fork();
    }
    cluster.on('online', function(worker) {
      return debug("Worker " + worker.process.pid + " now online");
    });
    cluster.on('exit', function(worker, code, signal) {
      debug("Worker " + worker.process.pid + " died. Restarting worker after signal " + (signal != null ? signal : code));
      return cluster.fork();
    });
  } else {
    PORT = 5000;
    server = http.createServer(function(request, response) {
      var apiMethod, pathname, query, url, _ref1;
      url = request.url;
      _ref1 = Url.parse(url, true), pathname = _ref1.pathname, query = _ref1.query;
      if (pathname === "/ping") {
        return response.end('OK');
      } else if (pathname === "/favicon.ico") {
        return response.end();
      }
      apiMethod = WordFrequencyAnalyzerHTTPApi[pathname];
      if (apiMethod != null) {
        debug("Request for method " + pathname);
        return apiMethod(request, response, query);
      } else {
        return sendErrorToStreamAsJSON(response, ERRORS.METHOD_NOT_EXIST("method " + pathname + " does not exist"));
      }
    });
    if (require.main !== module) {
      module.exports = server;
    } else {
      server.listen(PORT);
      debug("Server listening on port " + PORT);
    }
  }

}).call(this);

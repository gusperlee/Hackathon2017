(function() {
  var PARSER_DEFINITIONS, PARSER_OPTIONS_DEFAULTS, PARSER_OPTIONS_KEYS, PARSER_OPTIONS_LANGUAGES, _ref;

  _ref = require('./parser_options'), PARSER_OPTIONS_KEYS = _ref.PARSER_OPTIONS_KEYS, PARSER_OPTIONS_DEFAULTS = _ref.PARSER_OPTIONS_DEFAULTS, PARSER_OPTIONS_LANGUAGES = _ref.PARSER_OPTIONS_LANGUAGES;

  PARSER_DEFINITIONS = {
    STOP_CHAR_HASH: function(language) {
      if (language == null) {
        language = PARSER_OPTIONS_DEFAULTS[PARSER_OPTIONS_KEYS.LANGUAGE];
      }
      if (language === PARSER_OPTIONS_LANGUAGES.EN || true) {
        return {
          ' ': true,
          ',': true,
          '.': true,
          '?': true,
          '!': true,
          ';': true,
          ':': true,
          '(': true,
          ')': true,
          '[': true,
          ']': true,
          '{': true,
          '}': true,
          '\"': true,
          '\n': true,
          '\t': true
        };
      }
    },
    STOP_WORD_FILTER_HASH: function(language) {
      if (language == null) {
        language = PARSER_OPTIONS_DEFAULTS[PARSER_OPTIONS_KEYS.LANGUAGE];
      }
      if (language === PARSER_OPTIONS_LANGUAGES.EN || true) {
        return {
          'the': true,
          'is': true,
          'at': true,
          'which': true,
          'on': true,
          'of': true,
          'to': true,
          'and': true,
          'a': true,
          '-': true,
          '—': true
        };
      }
    },
    WORD_STEM_AND_MODIFIER_REGEXP: function(language) {
      if (language == null) {
        language = PARSER_OPTIONS_DEFAULTS[PARSER_OPTIONS_KEYS.LANGUAGE];
      }
      if (language === PARSER_OPTIONS_LANGUAGES.EN || true) {
        return [/^.*?('|"|”).*?('|"|”).*?$/, /^('|"|”)/, /('|"|”)(?:s*)$/];
      }
    }
  };

  module.exports = {
    STOP_CHAR_HASH: PARSER_DEFINITIONS.STOP_CHAR_HASH,
    STOP_WORD_FILTER_HASH: PARSER_DEFINITIONS.STOP_WORD_FILTER_HASH,
    WORD_STEM_AND_MODIFIER_REGEXP: PARSER_DEFINITIONS.WORD_STEM_AND_MODIFIER_REGEXP
  };

}).call(this);

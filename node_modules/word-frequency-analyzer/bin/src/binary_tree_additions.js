(function() {
  var AVLTree, BinarySearchTree, ReversibleAVLTree, append, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('binary-search-tree'), AVLTree = _ref.AVLTree, BinarySearchTree = _ref.BinarySearchTree;

  append = function(array, toAppend, maxSize) {
    var i, item, _i, _len;
    i = 0;
    for (_i = 0, _len = toAppend.length; _i < _len; _i++) {
      item = toAppend[_i];
      if (array.length < maxSize) {
        array.push(item);
      } else {
        return;
      }
    }
  };

  ReversibleAVLTree = (function(_super) {
    __extends(ReversibleAVLTree, _super);

    function ReversibleAVLTree() {
      _ref1 = ReversibleAVLTree.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    ReversibleAVLTree.prototype.betweenBoundsReversedTillCount = function() {
      return this.tree.betweenBoundsReversedTillCount.apply(this.tree, arguments);
    };

    return ReversibleAVLTree;

  })(AVLTree);

  BinarySearchTree.prototype.betweenBoundsReversedTillCount = function(query, count, lbm, ubm) {
    var res;
    res = [];
    if (!this.hasOwnProperty('key')) {
      return [];
    }
    lbm = lbm || this.getLowerBoundMatcher(query);
    ubm = ubm || this.getUpperBoundMatcher(query);
    if (ubm(this.key) && this.right && res.length < count) {
      append(res, this.right.betweenBoundsReversedTillCount(query, count, lbm, ubm), count);
    }
    if (lbm(this.key) && ubm(this.key) && res.length < count) {
      append(res, this.data, count);
    }
    if (lbm(this.key) && this.left && res.length < count) {
      append(res, this.left.betweenBoundsReversedTillCount(query, count, lbm, ubm), count);
    }
    return res;
  };

  module.exports = {
    ReversibleAVLTree: ReversibleAVLTree
  };

}).call(this);
